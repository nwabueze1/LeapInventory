{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\typescript\\\\my-app\\\\pages\\\\customers.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\nimport useFirebase from '../components/useFirebase';\nimport { useRouter } from 'next/router';\nimport { toast, ToastContainer } from 'react-toastify';\nimport AuthGuard from '../components/Authentification';\nimport Pagination from '../components/common/pagination';\nimport { paginate } from '../components/utils/paginate';\nimport CustomersTable from '../components/customersTable';\n\nconst _ = require('lodash');\n\nexport default function Customers() {\n  const {\n    0: customers,\n    1: setCustomers\n  } = useState([]);\n  const {\n    0: pageSize,\n    1: setPageSize\n  } = useState(4);\n  const {\n    0: currentPage,\n    1: setCurrentpage\n  } = useState(1);\n  const {\n    0: sortColumns,\n    1: setSortColumn\n  } = useState({\n    path: 'title',\n    order: 'asc'\n  });\n  const router = useRouter();\n  const app = useContext(useFirebase);\n  const firestore = app.firestore();\n\n  const handleDelete = async id => {\n    const deleteConfirm = confirm('Are you sure you ant to delete this document?');\n\n    if (deleteConfirm) {\n      //update the state\n      const allCustomers = customers;\n      const filtered = allCustomers.filter(m => m._id !== id);\n      setCustomers(filtered);\n\n      try {\n        await firestore.collection('customers').doc(id).delete();\n      } catch (error) {\n        toast.error('cant perform this operation');\n        setCustomers(allCustomers);\n      } //call the database to delete the customer with the id\n\n\n      toast.success('deleted successfully');\n      console.log(id);\n    }\n  };\n\n  const handleEdit = customer => {\n    // router.push(`customersForm/${id}`);\n    //find the customer with the give id and edit\n    console.log(custo);\n  };\n\n  const handlePageChange = page => {\n    setCurrentpage(page);\n  };\n\n  const handleSort = path => {\n    const sortColumn = _objectSpread({}, sortColumns);\n\n    if (sortColumn.path === path) sortColumn.order = sortColumn.order === 'asc' ? 'desc' : 'asc';else {\n      sortColumn.path = path;\n      sortColumn.order = 'asc';\n    }\n    setSortColumn(sortColumn);\n  };\n\n  useEffect(() => {\n    async function getCustomers() {\n      const citiesRef = firestore.collection('customers');\n      const snapshot = await citiesRef.get();\n      const customers = [];\n      snapshot.forEach(doc => {\n        let currentId = doc.id;\n\n        let appObj = _objectSpread(_objectSpread({}, doc.data()), {}, {\n          ['_id']: currentId\n        });\n\n        customers.push(appObj);\n        console.log(customers);\n      });\n      setCustomers(customers);\n    }\n\n    getCustomers();\n  }, []);\n\n  const sorted = _.orderBy(customers, [sortColumns.path], [sortColumns.order]);\n\n  const paginatedCustomers = paginate(sorted, currentPage, pageSize);\n  return __jsx(AuthGuard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 3\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, __jsx(Col, {\n    lg: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 6\n    }\n  }), __jsx(Col, {\n    lg: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 6\n    }\n  }, __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 8\n    }\n  }, \"Customers\", __jsx(\"span\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: () => router.push('/customersForm'),\n    className: \"btn-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 10\n    }\n  }, \"Add\"))), __jsx(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 8\n    }\n  }, __jsx(CustomersTable, {\n    customersPaginate: paginatedCustomers,\n    onDelete: handleDelete,\n    onEdit: handleEdit,\n    onSort: handleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }), __jsx(Pagination, {\n    itemsCount: customers.length,\n    currentPage: currentPage,\n    pageSize: pageSize,\n    onPageChange: handlePageChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  })), __jsx(ToastContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 8\n    }\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/typescript/my-app/pages/customers.tsx"],"names":["React","useState","useEffect","useContext","Button","Card","Col","Container","Row","useFirebase","useRouter","toast","ToastContainer","AuthGuard","Pagination","paginate","CustomersTable","_","require","Customers","customers","setCustomers","pageSize","setPageSize","currentPage","setCurrentpage","sortColumns","setSortColumn","path","order","router","app","firestore","handleDelete","id","deleteConfirm","confirm","allCustomers","filtered","filter","m","_id","collection","doc","delete","error","success","console","log","handleEdit","customer","custo","handlePageChange","page","handleSort","sortColumn","getCustomers","citiesRef","snapshot","get","forEach","currentId","appObj","data","push","sorted","orderBy","paginatedCustomers","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { Button, Card, Col, Container, FormControl, InputGroup, Row, Spinner, Table } from 'react-bootstrap';\r\nimport useFirebase from '../components/useFirebase';\r\nimport { useRouter } from 'next/router';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport AuthGuard from '../components/Authentification';\r\nimport Pagination from '../components/common/pagination';\r\nimport { paginate } from '../components/utils/paginate';\r\nimport CustomersTable from '../components/customersTable';\r\nconst _ = require('lodash');\r\n\r\nexport interface Customers {\r\n\tid: string;\r\n\tname: string;\r\n\temail: string;\r\n\taddress: string;\r\n\tphone: string;\r\n\ttype: 'Roaster' | 'One-off';\r\n\t_id?: any;\r\n}\r\n\r\nexport default function Customers(): JSX.Element {\r\n\tconst [customers, setCustomers] = useState<Array<Customers>>([]);\r\n\tconst [pageSize, setPageSize] = useState(4);\r\n\tconst [currentPage, setCurrentpage] = useState(1);\r\n\tconst [sortColumns, setSortColumn] = useState({ path: 'title', order: 'asc' });\r\n\tconst router = useRouter();\r\n\tconst app = useContext(useFirebase);\r\n\tconst firestore = app.firestore();\r\n\r\n\tconst handleDelete = async (id: string) => {\r\n\t\tconst deleteConfirm = confirm('Are you sure you ant to delete this document?');\r\n\t\tif (deleteConfirm) {\r\n\t\t\t//update the state\r\n\t\t\tconst allCustomers = customers;\r\n\t\t\tconst filtered = allCustomers.filter((m) => m._id !== id);\r\n\t\t\tsetCustomers(filtered);\r\n\t\t\ttry {\r\n\t\t\t\tawait firestore.collection('customers').doc(id).delete();\r\n\t\t\t} catch (error) {\r\n\t\t\t\ttoast.error('cant perform this operation');\r\n\t\t\t\tsetCustomers(allCustomers);\r\n\t\t\t}\r\n\r\n\t\t\t//call the database to delete the customer with the id\r\n\r\n\t\t\ttoast.success('deleted successfully');\r\n\t\t\tconsole.log(id);\r\n\t\t}\r\n\t};\r\n\tconst handleEdit = (customer: Customers) => {\r\n\t\t// router.push(`customersForm/${id}`);\r\n\t\t//find the customer with the give id and edit\r\n\t\tconsole.log(custo);\r\n\t};\r\n\tconst handlePageChange = (page: number) => {\r\n\t\tsetCurrentpage(page);\r\n\t};\r\n\tconst handleSort = (path: string) => {\r\n\t\tconst sortColumn = { ...sortColumns };\r\n\t\tif (sortColumn.path === path) sortColumn.order = sortColumn.order === 'asc' ? 'desc' : 'asc';\r\n\t\telse {\r\n\t\t\tsortColumn.path = path;\r\n\t\t\tsortColumn.order = 'asc';\r\n\t\t}\r\n\t\tsetSortColumn(sortColumn);\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tasync function getCustomers() {\r\n\t\t\tconst citiesRef = firestore.collection('customers');\r\n\t\t\tconst snapshot = await citiesRef.get();\r\n\r\n\t\t\tconst customers: Array<Customers> = [];\r\n\r\n\t\t\tsnapshot.forEach((doc) => {\r\n\t\t\t\tlet currentId = doc.id;\r\n\t\t\t\tlet appObj = { ...doc.data(), ['_id']: currentId };\r\n\t\t\t\tcustomers.push(appObj as Customers);\r\n\t\t\t\tconsole.log(customers);\r\n\t\t\t});\r\n\r\n\t\t\tsetCustomers(customers);\r\n\t\t}\r\n\t\tgetCustomers();\r\n\t}, []);\r\n\r\n\tconst sorted = _.orderBy(customers, [sortColumns.path], [sortColumns.order]);\r\n\tconst paginatedCustomers = paginate(sorted, currentPage, pageSize);\r\n\treturn (\r\n\t\t<AuthGuard>\r\n\t\t\t<Container>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col lg={4}></Col>\r\n\t\t\t\t\t<Col lg={8}>\r\n\t\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t\t<Card.Header>\r\n\t\t\t\t\t\t\t\tCustomers\r\n\t\t\t\t\t\t\t\t<span className=\"float-right\">\r\n\t\t\t\t\t\t\t\t\t<Button onClick={() => router.push('/customersForm')} className=\"btn-info\">\r\n\t\t\t\t\t\t\t\t\t\tAdd\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</Card.Header>\r\n\r\n\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t<CustomersTable\r\n\t\t\t\t\t\t\t\t\tcustomersPaginate={paginatedCustomers}\r\n\t\t\t\t\t\t\t\t\tonDelete={handleDelete}\r\n\t\t\t\t\t\t\t\t\tonEdit={handleEdit}\r\n\t\t\t\t\t\t\t\t\tonSort={handleSort}\r\n\t\t\t\t\t\t\t\t></CustomersTable>\r\n\t\t\t\t\t\t\t\t<Pagination\r\n\t\t\t\t\t\t\t\t\titemsCount={customers.length}\r\n\t\t\t\t\t\t\t\t\tcurrentPage={currentPage}\r\n\t\t\t\t\t\t\t\t\tpageSize={pageSize}\r\n\t\t\t\t\t\t\t\t\tonPageChange={handlePageChange}\r\n\t\t\t\t\t\t\t\t></Pagination>\r\n\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t<ToastContainer></ToastContainer>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t</AuthGuard>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}